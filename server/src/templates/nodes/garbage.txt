{% extends 'base.html' %}
{% block title %}Node Detail {% endblock %}
{% load static %}

{% block content %}

    <div class="container-fluid">
        <div class="form-group">
            <select class="form-control" id="refresh_interval">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
            </select>
        </div>
        {#        <canvas id="cpu_usage" width="1000" height="500"></canvas>#}
        {#        <hr />#}
        {#        <canvas id="ram_usage" width="1000" height="500"></canvas>#}
        {#        <hr />#}
        {#        <canvas id="network_usage" width="1000" height="500"></canvas>#}
        <div id='myChart' style='width:100%;height:100%;'></div>
        <div id='chartDiv' style='width:100%;height:100%;'></div>
    </div>

{% endblock %}

{% block javascript %}
    <script src="{{ STATIC_URL }}admin/js/sync_configurations.js" type="text/javascript"></script>

    <script>
        $(document).ready(function () {
            nodes={}
            for (i=0;i<{{ cpu_num }};i++){
                var id="zing"+i
                $('#myChart').append("<div id='"+id+"' style='width:400px;height:400px; float:left'></div>");

                nodes[i] = AmCharts.makeChart(id, {
                    "theme": "light",
                    "type": "gauge",
                    "axes": [{
                        "topTextFontSize": 20,
                        "topTextYOffset": 70,
                        "axisColor": "#31d6ea",
                        "axisThickness": 1,
                        "endValue": 100,
                        "gridInside": true,
                        "inside": true,
                        "radius": "50%",
                        "valueInterval": 10,
                        "tickColor": "#67b7dc",
                        "startAngle": -90,
                        "endAngle": 90,
                        "bandOutlineAlpha": 0,
                        "bands": [{
                            "color": "#0080ff",
                            "endValue": 100,
                            "innerRadius": "165%",
                            "radius": "170%",
                            "gradientRatio": [0.5, 0, -0.5],
                            "startValue": 0
                        }, {
                            "color": "#3cd3a3",
                            "endValue": 0,
                            "innerRadius": "165%",
                            "radius": "170%",
                            "gradientRatio": [0.5, 0, -0.5],
                            "startValue": 0
                        }]
                    }],
                    "arrows": [{
                        "alpha": 0.5,
                        "innerRadius": "35%",
                        "nailRadius": 0,
                        "radius": "170%"
                    }]
                });
            }


            setInterval( randomValue, 2000 );

            function randomValue() {

                $.ajax({
                    type : "GET",
                    dataType : 'json',
                    data: {'csrfmiddlewaretoken': '{{ csrf_token }}' },
                    url : '{% url 'node_details' node.id %}',
                    success : function(result) {
                        if (result){
                            keys=result.cpu_usage;
                            keylen = keys.length;
                            for (i = 0; i < keylen; i++) {
                                var a = nodes[i];
                                if (nodes[i]) {
                                    if (nodes[i].arrows) {
                                        if (nodes[i].arrows[0]) {
                                            if (nodes[i].arrows[0].setValue) {
                                                (nodes[i]).arrows[0].setValue(keys[i]);
                                                nodes[i].axes[0].setTopText(keys[i] + " %");
                                                nodes[i].axes[0].setBottomText("CPU " + i);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
            }
        });
        $(window).on("load",function () {
            $('.amcharts-chart-div a').remove();
        });
    </script>
{% endblock %}














    for node in yarn_list:
    # print(node)
    # client_installed = True
    # if node[1] not in all_nodes:
    #     client_installed=False
    #
    # if node[1] in nodes_with_client_list:
    #     if node[2] == 1 & node[4] == 1:
    #         active_data = {"ip": node[1], "hostname": node[15], "fqdn": node[16],
    #                        "status": node[3]}
    #     elif node[2] == 1 & node[4] == 0:
    #         print("inside standby")
    #         standby_data = {"ip": node[1], "hostname": node[15], "fqdn": node[16],
    #                    "status": node[3]}
    #     else:
    #         nodemanagers.append((node[8],node[9],node[11],node[12],node[3],node[13],node[15],node[1],client_installed))
    # else:
    #     nodemanagers.append((node[8],node[9],node[11],node[12],node[3],node[13],node[15],node[1],client_installed))



    # active = obj.get_node_data(master_ip)
    # if active is None:
    #     active_data = {"ip": "", "hostname": "", "fqdn": "", "status": ""}
    # else:
    #     active_data = {"ip": active.ip, "hostname": active.hostname, "fqdn": active.fqdn, "status": master["status"]}
    #
    # standby_master = obj.get_standby_master()
    # standby = obj.get_node_data(standby_master["ip"])
    # if standby is None:
    #     standby_data = {"ip": "", "hostname": "", "fqdn": "", "status": ""}
    # else:
    #     standby_data = {"ip": standby.ip, "hostname": standby.hostname, "fqdn": standby.fqdn,
    #                     "status": standby_master["status"]}
    #
    # if nodes:
    #     if nodes[0].get("dead"):
    #         context["all_dead"]=True
    #     else:
    #         nodes_all = obj.get_all_nodes()
    #         for node in nodes:
    #             client_installed=True
    #             if node.get("ip") not in nodes_all:
    #                 client_installed = False
    #
    #             nodemanagers.append((int(re.search('(\\d+)',node.get("CPU-Capacity")).group(0)),
    #                                  node.get("Last-Health-Update"),
    #                                  int(re.search('(\\d+)', node.get("CPU-Used")).group(0)),
    #                                  int(re.search('(\\d+)', node.get("Memory-Capacity")).group(0)),
    #                                  int(re.search('(\\d+)', node.get("Memory-Used")).group(0)),
    #                                  node.get("Node-State"),
    #                                  node.get("Rack"),
    #                                  node.get("Node-Id"),
    #                                  node.get("ip"),
    #                                  client_installed))
    # else:
    #     messages.error(request, "Couldnot retrive any information on node. Please refresh the page and try again")
    #     # context["error_in_conf_file"] = True
    #     return render(request, 'yarn/yarn.html', context)

    # service_object = Services.objects.get(name='yarn')
    # restart_status_checks = Restart_after_configuration.objects.filter(service_id=service_object.id).exists()
    # if restart_status_checks:
    #     restart_status_check = Restart_after_configuration.objects.get(service_id=service_object.id)
    #     restart_status = restart_status_check.status
    # else:
    #     restart_status = 0
    # print(nodemanagers)
    # context["nodemanagers"] = nodemanagers
    # context["restart_status"] = restart_status
    # context['active_node'] = active_data
    # context['standby_node'] = standby_data








# try:
    #     url = "http://%s:11605/yarn/node/jmx" % master_ip
    #     r = requests.get(url, verify=False,headers={"API-KEY":obj.get_api_key()})
    # except ConnectionError as e:
    #     messages.error(request, e)
    #     return render(request,'error/500.html',context)
    #
    # if r.status_code != 200 :
    #     messages.error(request, "client returned status code %s " % r.status_code)
    #     return render(request, 'yarn/yarn.html', context)
    # nodes = r.json()


     if request.is_ajax():
            try:
                url = 'http://%s:11605/system/statistics' % nodes["ip"]
                data = requests.get(url, headers={"API-KEY": helper.get_api_key()})
                return JsonResponse(data.json())
            except Exception as e:
                messages.error(request, e)
                return JsonResponse(e)
        else: